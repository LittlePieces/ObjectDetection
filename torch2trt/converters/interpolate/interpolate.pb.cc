// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: torch2trt/converters/interpolate/interpolate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "torch2trt/converters/interpolate/interpolate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace torch2trt {

namespace {

const ::google::protobuf::Descriptor* interpolate_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  interpolate_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataTypeMessage_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto() {
  protobuf_AddDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "torch2trt/converters/interpolate/interpolate.proto");
  GOOGLE_CHECK(file != NULL);
  interpolate_Message_descriptor_ = file->message_type(0);
  static const int interpolate_Message_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, align_corners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, dtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, input_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, output_size_),
  };
  interpolate_Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      interpolate_Message_descriptor_,
      interpolate_Message::default_instance_,
      interpolate_Message_offsets_,
      -1,
      -1,
      -1,
      sizeof(interpolate_Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interpolate_Message, _is_default_instance_));
  DataTypeMessage_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      interpolate_Message_descriptor_, &interpolate_Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto() {
  delete interpolate_Message::default_instance_;
  delete interpolate_Message_reflection_;
}

void protobuf_AddDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n2torch2trt/converters/interpolate/inter"
    "polate.proto\022\ttorch2trt\"\234\001\n\023interpolate_"
    "Message\022\014\n\004size\030\001 \003(\003\022\014\n\004mode\030\002 \001(\t\022\025\n\ra"
    "lign_corners\030\003 \001(\010\022)\n\005dtype\030\004 \001(\0162\032.torc"
    "h2trt.DataTypeMessage\022\022\n\ninput_size\030\005 \003("
    "\003\022\023\n\013output_size\030\006 \003(\003*\?\n\017DataTypeMessag"
    "e\022\n\n\006kFloat\020\000\022\t\n\005kHalf\020\001\022\t\n\005kInt8\020\002\022\n\n\006k"
    "Int32\020\003b\006proto3", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "torch2trt/converters/interpolate/interpolate.proto", &protobuf_RegisterTypes);
  interpolate_Message::default_instance_ = new interpolate_Message();
  interpolate_Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto {
  StaticDescriptorInitializer_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto() {
    protobuf_AddDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto();
  }
} static_descriptor_initializer_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto_;
const ::google::protobuf::EnumDescriptor* DataTypeMessage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTypeMessage_descriptor_;
}
bool DataTypeMessage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int interpolate_Message::kSizeFieldNumber;
const int interpolate_Message::kModeFieldNumber;
const int interpolate_Message::kAlignCornersFieldNumber;
const int interpolate_Message::kDtypeFieldNumber;
const int interpolate_Message::kInputSizeFieldNumber;
const int interpolate_Message::kOutputSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

interpolate_Message::interpolate_Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:torch2trt.interpolate_Message)
}

void interpolate_Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

interpolate_Message::interpolate_Message(const interpolate_Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:torch2trt.interpolate_Message)
}

void interpolate_Message::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  align_corners_ = false;
  dtype_ = 0;
}

interpolate_Message::~interpolate_Message() {
  // @@protoc_insertion_point(destructor:torch2trt.interpolate_Message)
  SharedDtor();
}

void interpolate_Message::SharedDtor() {
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void interpolate_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* interpolate_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return interpolate_Message_descriptor_;
}

const interpolate_Message& interpolate_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_torch2trt_2fconverters_2finterpolate_2finterpolate_2eproto();
  return *default_instance_;
}

interpolate_Message* interpolate_Message::default_instance_ = NULL;

interpolate_Message* interpolate_Message::New(::google::protobuf::Arena* arena) const {
  interpolate_Message* n = new interpolate_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void interpolate_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:torch2trt.interpolate_Message)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(interpolate_Message, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<interpolate_Message*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(align_corners_, dtype_);
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  size_.Clear();
  input_size_.Clear();
  output_size_.Clear();
}

bool interpolate_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:torch2trt.interpolate_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 size = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_size())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mode;
        break;
      }

      // optional string mode = 2;
      case 2: {
        if (tag == 18) {
         parse_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "torch2trt.interpolate_Message.mode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_align_corners;
        break;
      }

      // optional bool align_corners = 3;
      case 3: {
        if (tag == 24) {
         parse_align_corners:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &align_corners_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dtype;
        break;
      }

      // optional .torch2trt.DataTypeMessage dtype = 4;
      case 4: {
        if (tag == 32) {
         parse_dtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::torch2trt::DataTypeMessage >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_input_size;
        break;
      }

      // repeated int64 input_size = 5;
      case 5: {
        if (tag == 42) {
         parse_input_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_input_size())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42, input, this->mutable_input_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_output_size;
        break;
      }

      // repeated int64 output_size = 6;
      case 6: {
        if (tag == 50) {
         parse_output_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_output_size())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 50, input, this->mutable_output_size())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:torch2trt.interpolate_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:torch2trt.interpolate_Message)
  return false;
#undef DO_
}

void interpolate_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:torch2trt.interpolate_Message)
  // repeated int64 size = 1;
  if (this->size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_size_cached_byte_size_);
  }
  for (int i = 0; i < this->size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->size(i), output);
  }

  // optional string mode = 2;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "torch2trt.interpolate_Message.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mode(), output);
  }

  // optional bool align_corners = 3;
  if (this->align_corners() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->align_corners(), output);
  }

  // optional .torch2trt.DataTypeMessage dtype = 4;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dtype(), output);
  }

  // repeated int64 input_size = 5;
  if (this->input_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_size_cached_byte_size_);
  }
  for (int i = 0; i < this->input_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->input_size(i), output);
  }

  // repeated int64 output_size = 6;
  if (this->output_size_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_output_size_cached_byte_size_);
  }
  for (int i = 0; i < this->output_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->output_size(i), output);
  }

  // @@protoc_insertion_point(serialize_end:torch2trt.interpolate_Message)
}

::google::protobuf::uint8* interpolate_Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch2trt.interpolate_Message)
  // repeated int64 size = 1;
  if (this->size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _size_cached_byte_size_, target);
  }
  for (int i = 0; i < this->size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->size(i), target);
  }

  // optional string mode = 2;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "torch2trt.interpolate_Message.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mode(), target);
  }

  // optional bool align_corners = 3;
  if (this->align_corners() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->align_corners(), target);
  }

  // optional .torch2trt.DataTypeMessage dtype = 4;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dtype(), target);
  }

  // repeated int64 input_size = 5;
  if (this->input_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_size_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->input_size(i), target);
  }

  // repeated int64 output_size = 6;
  if (this->output_size_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _output_size_cached_byte_size_, target);
  }
  for (int i = 0; i < this->output_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->output_size(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:torch2trt.interpolate_Message)
  return target;
}

int interpolate_Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:torch2trt.interpolate_Message)
  int total_size = 0;

  // optional string mode = 2;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mode());
  }

  // optional bool align_corners = 3;
  if (this->align_corners() != 0) {
    total_size += 1 + 1;
  }

  // optional .torch2trt.DataTypeMessage dtype = 4;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  // repeated int64 size = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->size(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _size_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 input_size = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->input_size(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_size_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 output_size = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->output_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->output_size(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_size_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void interpolate_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch2trt.interpolate_Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const interpolate_Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const interpolate_Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch2trt.interpolate_Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch2trt.interpolate_Message)
    MergeFrom(*source);
  }
}

void interpolate_Message::MergeFrom(const interpolate_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch2trt.interpolate_Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  size_.MergeFrom(from.size_);
  input_size_.MergeFrom(from.input_size_);
  output_size_.MergeFrom(from.output_size_);
  if (from.mode().size() > 0) {

    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from.align_corners() != 0) {
    set_align_corners(from.align_corners());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void interpolate_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch2trt.interpolate_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interpolate_Message::CopyFrom(const interpolate_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch2trt.interpolate_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interpolate_Message::IsInitialized() const {

  return true;
}

void interpolate_Message::Swap(interpolate_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void interpolate_Message::InternalSwap(interpolate_Message* other) {
  size_.UnsafeArenaSwap(&other->size_);
  mode_.Swap(&other->mode_);
  std::swap(align_corners_, other->align_corners_);
  std::swap(dtype_, other->dtype_);
  input_size_.UnsafeArenaSwap(&other->input_size_);
  output_size_.UnsafeArenaSwap(&other->output_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata interpolate_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = interpolate_Message_descriptor_;
  metadata.reflection = interpolate_Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// interpolate_Message

// repeated int64 size = 1;
int interpolate_Message::size_size() const {
  return size_.size();
}
void interpolate_Message::clear_size() {
  size_.Clear();
}
 ::google::protobuf::int64 interpolate_Message::size(int index) const {
  // @@protoc_insertion_point(field_get:torch2trt.interpolate_Message.size)
  return size_.Get(index);
}
 void interpolate_Message::set_size(int index, ::google::protobuf::int64 value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:torch2trt.interpolate_Message.size)
}
 void interpolate_Message::add_size(::google::protobuf::int64 value) {
  size_.Add(value);
  // @@protoc_insertion_point(field_add:torch2trt.interpolate_Message.size)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
interpolate_Message::size() const {
  // @@protoc_insertion_point(field_list:torch2trt.interpolate_Message.size)
  return size_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
interpolate_Message::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:torch2trt.interpolate_Message.size)
  return &size_;
}

// optional string mode = 2;
void interpolate_Message::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& interpolate_Message::mode() const {
  // @@protoc_insertion_point(field_get:torch2trt.interpolate_Message.mode)
  return mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void interpolate_Message::set_mode(const ::std::string& value) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:torch2trt.interpolate_Message.mode)
}
 void interpolate_Message::set_mode(const char* value) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:torch2trt.interpolate_Message.mode)
}
 void interpolate_Message::set_mode(const char* value, size_t size) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:torch2trt.interpolate_Message.mode)
}
 ::std::string* interpolate_Message::mutable_mode() {
  
  // @@protoc_insertion_point(field_mutable:torch2trt.interpolate_Message.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* interpolate_Message::release_mode() {
  // @@protoc_insertion_point(field_release:torch2trt.interpolate_Message.mode)
  
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void interpolate_Message::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    
  } else {
    
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:torch2trt.interpolate_Message.mode)
}

// optional bool align_corners = 3;
void interpolate_Message::clear_align_corners() {
  align_corners_ = false;
}
 bool interpolate_Message::align_corners() const {
  // @@protoc_insertion_point(field_get:torch2trt.interpolate_Message.align_corners)
  return align_corners_;
}
 void interpolate_Message::set_align_corners(bool value) {
  
  align_corners_ = value;
  // @@protoc_insertion_point(field_set:torch2trt.interpolate_Message.align_corners)
}

// optional .torch2trt.DataTypeMessage dtype = 4;
void interpolate_Message::clear_dtype() {
  dtype_ = 0;
}
 ::torch2trt::DataTypeMessage interpolate_Message::dtype() const {
  // @@protoc_insertion_point(field_get:torch2trt.interpolate_Message.dtype)
  return static_cast< ::torch2trt::DataTypeMessage >(dtype_);
}
 void interpolate_Message::set_dtype(::torch2trt::DataTypeMessage value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:torch2trt.interpolate_Message.dtype)
}

// repeated int64 input_size = 5;
int interpolate_Message::input_size_size() const {
  return input_size_.size();
}
void interpolate_Message::clear_input_size() {
  input_size_.Clear();
}
 ::google::protobuf::int64 interpolate_Message::input_size(int index) const {
  // @@protoc_insertion_point(field_get:torch2trt.interpolate_Message.input_size)
  return input_size_.Get(index);
}
 void interpolate_Message::set_input_size(int index, ::google::protobuf::int64 value) {
  input_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:torch2trt.interpolate_Message.input_size)
}
 void interpolate_Message::add_input_size(::google::protobuf::int64 value) {
  input_size_.Add(value);
  // @@protoc_insertion_point(field_add:torch2trt.interpolate_Message.input_size)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
interpolate_Message::input_size() const {
  // @@protoc_insertion_point(field_list:torch2trt.interpolate_Message.input_size)
  return input_size_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
interpolate_Message::mutable_input_size() {
  // @@protoc_insertion_point(field_mutable_list:torch2trt.interpolate_Message.input_size)
  return &input_size_;
}

// repeated int64 output_size = 6;
int interpolate_Message::output_size_size() const {
  return output_size_.size();
}
void interpolate_Message::clear_output_size() {
  output_size_.Clear();
}
 ::google::protobuf::int64 interpolate_Message::output_size(int index) const {
  // @@protoc_insertion_point(field_get:torch2trt.interpolate_Message.output_size)
  return output_size_.Get(index);
}
 void interpolate_Message::set_output_size(int index, ::google::protobuf::int64 value) {
  output_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:torch2trt.interpolate_Message.output_size)
}
 void interpolate_Message::add_output_size(::google::protobuf::int64 value) {
  output_size_.Add(value);
  // @@protoc_insertion_point(field_add:torch2trt.interpolate_Message.output_size)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
interpolate_Message::output_size() const {
  // @@protoc_insertion_point(field_list:torch2trt.interpolate_Message.output_size)
  return output_size_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
interpolate_Message::mutable_output_size() {
  // @@protoc_insertion_point(field_mutable_list:torch2trt.interpolate_Message.output_size)
  return &output_size_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace torch2trt

// @@protoc_insertion_point(global_scope)
